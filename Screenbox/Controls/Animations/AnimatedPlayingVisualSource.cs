//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.2+g858356d409
//       
//       Command:
//           LottieGen -GenerateColorBindings -GenerateDependencyObject -Language CSharp -MinimumUapVersion 8 -Namespace Screenbox.Controls.Animations -Public -WinUIVersion 2.8 -InputFile AnimatedPlayingVisualSource.json
//       
//       Input file:
//           AnimatedPlayingVisualSource.json (5459 bytes created 23:35-07:00 Oct 15 2023)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v15 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |            35 |           39 |
// |--------------------------+---------------+--------------|
// | Expression animators     |             2 |            4 |
// | KeyFrame animators       |             3 |            3 |
// | Reference parameters     |             2 |            4 |
// | Expression operations    |             4 |            4 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             1 |            1 |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             2 |            2 |
// | PathKeyFrameAnimations   |             - |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             1 |            1 |
// | ShapeVisuals             |             1 |            1 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             - |            - |
// | CompositionSpriteShapes  |             3 |            3 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             1 |            1 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Windows.UI.Composition;
using Windows.UI.Xaml;

namespace Screenbox.Controls.Animations
{
    // Name:        Artboard 10
    // Frame rate:  60 fps
    // Frame count: 120
    // Duration:    2000.0 mS
    sealed class AnimatedPlayingVisualSource
        : DependencyObject
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 2.000 seconds.
        internal const long c_durationTicks = 20000000;

        // Theme property: Color_FFFFFF.
        internal static readonly Color c_themeColor_FFFFFF = Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF);

        CompositionPropertySet _themeProperties;

        /// <summary>
        /// Dependency property for Color_FFFFFF.
        /// </summary>
        public static readonly DependencyProperty Color_FFFFFFProperty =
            DependencyProperty.Register("Color_FFFFFF", typeof(Color), typeof(AnimatedPlayingVisualSource),
                new PropertyMetadata(Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF), OnColor_FFFFFFChanged));

        // Theme properties.
        public Color Color_FFFFFF
        {
            get => (Color)GetValue(Color_FFFFFFProperty);
            set => SetValue(Color_FFFFFFProperty, value);
        }

        static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        static void OnColor_FFFFFFChanged(DependencyObject d, DependencyPropertyChangedEventArgs args)
        {
            ((AnimatedPlayingVisualSource)d)._themeProperties?.InsertVector4("Color_FFFFFF", ColorAsVector4((Color)(Color)args.NewValue));
        }

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties == null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Color_FFFFFF", ColorAsVector4((Color)Color_FFFFFF));
            }
            return _themeProperties;
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (AnimatedPlayingVisualSource_AnimatedVisual_UAPv15.IsRuntimeCompatible())
            {
                var res =
                    new AnimatedPlayingVisualSource_AnimatedVisual_UAPv15(
                        compositor,
                        _themeProperties
                        );
                res.CreateAnimations();
                return res;
            }

            if (AnimatedPlayingVisualSource_AnimatedVisual_UAPv7.IsRuntimeCompatible())
            {
                var res =
                    new AnimatedPlayingVisualSource_AnimatedVisual_UAPv7(
                        compositor,
                        _themeProperties
                        );
                res.CreateAnimations();
                return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 120d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(20000000);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 120d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
            if (propertyName == "Color_FFFFFF")
            {
                Color_FFFFFF = value;
            }
            else
            {
                return;
            }

            if (_themeProperties != null)
            {
                _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
            }
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class AnimatedPlayingVisualSource_AnimatedVisual_UAPv15 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 20000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            AnimationController _animationController_0;
            CompositionColorBrush _themeColor_Color_FFFFFF;
            CompositionPath _path;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            CompositionPathGeometry _pathGeometry_2;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            StepEasingFunction _holdThenStepEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            CanvasGeometry Geometry()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, -12F));
                    builder.AddLine(new Vector2(0F, 12.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Color_FFFFFF
            CompositionColorBrush ThemeColor_Color_FFFFFF()
            {
                if (_themeColor_Color_FFFFFF != null) { return _themeColor_Color_FFFFFF; }
                var result = _themeColor_Color_FFFFFF = _c.CreateColorBrush();
                BindProperty(_themeColor_Color_FFFFFF, "Color", "ColorRGB(_theme.Color_FFFFFF.W,_theme.Color_FFFFFF.X,_theme.Color_FFFFFF.Y,_theme.Color_FFFFFF.Z)", "_theme", _themeProperties);
                return result;
            }

            CompositionPath Path()
            {
                if (_path != null) { return _path; }
                var result = _path = new CompositionPath(Geometry());
                return result;
            }

            // - Layer aggregator
            // Offset:<35, 23.5>
            CompositionPathGeometry PathGeometry_0()
            {
                if (_pathGeometry_0 != null) { return _pathGeometry_0; }
                var result = _pathGeometry_0 = _c.CreatePathGeometry(Path());
                return result;
            }

            // - Layer aggregator
            // Offset:<24, 23.5>
            CompositionPathGeometry PathGeometry_1()
            {
                if (_pathGeometry_1 != null) { return _pathGeometry_1; }
                var result = _pathGeometry_1 = _c.CreatePathGeometry(Path());
                return result;
            }

            // - Layer aggregator
            // Offset:<13, 23.5>
            CompositionPathGeometry PathGeometry_2()
            {
                if (_pathGeometry_2 != null) { return _pathGeometry_2; }
                var result = _pathGeometry_2 = _c.CreatePathGeometry(Path());
                return result;
            }

            // Layer aggregator
            // 路径 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<35, 23.5>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(1F, 0F, 0F, 1F, 35F, 23.5F)); ;
                result.StrokeBrush = ThemeColor_Color_FFFFFF();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // Layer aggregator
            // 路径 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<24, 23.5>
                var result = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(1F, 0F, 0F, 1F, 24F, 23.5F)); ;
                result.StrokeBrush = ThemeColor_Color_FFFFFF();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // Layer aggregator
            // 路径 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<13, 23.5>
                var result = CreateSpriteShape(PathGeometry_2(), new Matrix3x2(1F, 0F, 0F, 1F, 13F, 23.5F)); ;
                result.StrokeBrush = ThemeColor_Color_FFFFFF();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_0;
            }

            // - - Layer aggregator
            // -  Offset:<24, 23.5>
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p95_to_0p95_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0.949999988F, HoldThenStepEasingFunction());
                // Frame 21.
                result.InsertKeyFrame(0.174999997F, 0F, CubicBezierEasingFunction_0());
                // Frame 46.
                result.InsertKeyFrame(0.383333325F, 0.949999988F, CubicBezierEasingFunction_0());
                // Frame 71.
                result.InsertKeyFrame(0.591666639F, 0F, CubicBezierEasingFunction_0());
                // Frame 90.
                result.InsertKeyFrame(0.75F, 0.949999988F, CubicBezierEasingFunction_0());
                // Frame 105.
                result.InsertKeyFrame(0.875F, 0.5F, CubicBezierEasingFunction_0());
                // Frame 119.
                result.InsertKeyFrame(0.991666675F, 0.949999988F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - Layer aggregator
            // -  Offset:<13, 23.5>
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p95_to_0p95_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0.949999988F, HoldThenStepEasingFunction());
                // Frame 14.
                result.InsertKeyFrame(0.116666667F, 0.300000012F, CubicBezierEasingFunction_0());
                // Frame 35.
                result.InsertKeyFrame(0.291666657F, 0.949999988F, CubicBezierEasingFunction_0());
                // Frame 56.
                result.InsertKeyFrame(0.466666669F, 0F, CubicBezierEasingFunction_0());
                // Frame 79.
                result.InsertKeyFrame(0.658333361F, 0.949999988F, CubicBezierEasingFunction_0());
                // Frame 100.
                result.InsertKeyFrame(0.833333313F, 0.400000006F, CubicBezierEasingFunction_0());
                // Frame 119.
                result.InsertKeyFrame(0.991666675F, 0.949999988F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - Layer aggregator
            // -  Offset:<35, 23.5>
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p96_to_0p95()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0.959999979F, HoldThenStepEasingFunction());
                // Frame 15.
                result.InsertKeyFrame(0.125F, 0.600000024F, CubicBezierEasingFunction_0());
                // Frame 30.
                result.InsertKeyFrame(0.25F, 0.800000012F, CubicBezierEasingFunction_0());
                // Frame 35.
                result.InsertKeyFrame(0.291666657F, 0.980000019F, CubicBezierEasingFunction_0());
                // Frame 50.
                result.InsertKeyFrame(0.416666657F, 0.200000003F, CubicBezierEasingFunction_0());
                // Frame 55.
                result.InsertKeyFrame(0.458333343F, 0F, CubicBezierEasingFunction_0());
                // Frame 70.
                result.InsertKeyFrame(0.583333313F, 0.800000012F, CubicBezierEasingFunction_0());
                // Frame 75.
                result.InsertKeyFrame(0.625F, 0.939999998F, CubicBezierEasingFunction_0());
                // Frame 90.
                result.InsertKeyFrame(0.75F, 0.200000003F, CubicBezierEasingFunction_0());
                // Frame 94.
                result.InsertKeyFrame(0.783333361F, 0F, CubicBezierEasingFunction_0());
                // Frame 115.
                result.InsertKeyFrame(0.958333313F, 0.800000012F, CubicBezierEasingFunction_0());
                // Frame 119.
                result.InsertKeyFrame(0.991666675F, 0.949999988F, CubicBezierEasingFunction_0());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                var shapes = result.Shapes;
                // Offset:<35, 23.5>
                shapes.Add(SpriteShape_0());
                // Offset:<24, 23.5>
                shapes.Add(SpriteShape_1());
                // Offset:<13, 23.5>
                shapes.Add(SpriteShape_2());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            internal AnimatedPlayingVisualSource_AnimatedVisual_UAPv15(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(48F, 48F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _pathGeometry_0.StartAnimation("TrimStart", TrimStartScalarAnimation_0p96_to_0p95(), AnimationController_0());
                _pathGeometry_1.StartAnimation("TrimStart", TrimStartScalarAnimation_0p95_to_0p95_0(), AnimationController_0());
                _pathGeometry_2.StartAnimation("TrimStart", TrimStartScalarAnimation_0p95_to_0p95_1(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _pathGeometry_0.StopAnimation("TrimStart");
                _pathGeometry_1.StopAnimation("TrimStart");
                _pathGeometry_2.StopAnimation("TrimStart");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 15);
            }
        }

        sealed class AnimatedPlayingVisualSource_AnimatedVisual_UAPv7 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 20000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Color_FFFFFF;
            CompositionPath _path;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            CompositionPathGeometry _pathGeometry_2;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CanvasGeometry Geometry()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, -12F));
                    builder.AddLine(new Vector2(0F, 12.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Color_FFFFFF
            CompositionColorBrush ThemeColor_Color_FFFFFF()
            {
                if (_themeColor_Color_FFFFFF != null) { return _themeColor_Color_FFFFFF; }
                var result = _themeColor_Color_FFFFFF = _c.CreateColorBrush();
                BindProperty(_themeColor_Color_FFFFFF, "Color", "ColorRGB(_theme.Color_FFFFFF.W,_theme.Color_FFFFFF.X,_theme.Color_FFFFFF.Y,_theme.Color_FFFFFF.Z)", "_theme", _themeProperties);
                return result;
            }

            CompositionPath Path()
            {
                if (_path != null) { return _path; }
                var result = _path = new CompositionPath(Geometry());
                return result;
            }

            // - Layer aggregator
            // Offset:<35, 23.5>
            CompositionPathGeometry PathGeometry_0()
            {
                if (_pathGeometry_0 != null) { return _pathGeometry_0; }
                var result = _pathGeometry_0 = _c.CreatePathGeometry(Path());
                return result;
            }

            // - Layer aggregator
            // Offset:<24, 23.5>
            CompositionPathGeometry PathGeometry_1()
            {
                if (_pathGeometry_1 != null) { return _pathGeometry_1; }
                var result = _pathGeometry_1 = _c.CreatePathGeometry(Path());
                return result;
            }

            // - Layer aggregator
            // Offset:<13, 23.5>
            CompositionPathGeometry PathGeometry_2()
            {
                if (_pathGeometry_2 != null) { return _pathGeometry_2; }
                var result = _pathGeometry_2 = _c.CreatePathGeometry(Path());
                return result;
            }

            // Layer aggregator
            // 路径 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<35, 23.5>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(1F, 0F, 0F, 1F, 35F, 23.5F)); ;
                result.StrokeBrush = ThemeColor_Color_FFFFFF();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // Layer aggregator
            // 路径 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<24, 23.5>
                var result = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(1F, 0F, 0F, 1F, 24F, 23.5F)); ;
                result.StrokeBrush = ThemeColor_Color_FFFFFF();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // Layer aggregator
            // 路径 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<13, 23.5>
                var result = CreateSpriteShape(PathGeometry_2(), new Matrix3x2(1F, 0F, 0F, 1F, 13F, 23.5F)); ;
                result.StrokeBrush = ThemeColor_Color_FFFFFF();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 2F;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_0;
            }

            ExpressionAnimation RootProgress()
            {
                if (_rootProgress != null) { return _rootProgress; }
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - - Layer aggregator
            // -  Offset:<24, 23.5>
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p95_to_0p95_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0.949999988F, HoldThenStepEasingFunction());
                // Frame 21.
                result.InsertKeyFrame(0.174999997F, 0F, CubicBezierEasingFunction_0());
                // Frame 46.
                result.InsertKeyFrame(0.383333325F, 0.949999988F, CubicBezierEasingFunction_0());
                // Frame 71.
                result.InsertKeyFrame(0.591666639F, 0F, CubicBezierEasingFunction_0());
                // Frame 90.
                result.InsertKeyFrame(0.75F, 0.949999988F, CubicBezierEasingFunction_0());
                // Frame 105.
                result.InsertKeyFrame(0.875F, 0.5F, CubicBezierEasingFunction_0());
                // Frame 119.
                result.InsertKeyFrame(0.991666675F, 0.949999988F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - Layer aggregator
            // -  Offset:<13, 23.5>
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p95_to_0p95_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0.949999988F, HoldThenStepEasingFunction());
                // Frame 14.
                result.InsertKeyFrame(0.116666667F, 0.300000012F, CubicBezierEasingFunction_0());
                // Frame 35.
                result.InsertKeyFrame(0.291666657F, 0.949999988F, CubicBezierEasingFunction_0());
                // Frame 56.
                result.InsertKeyFrame(0.466666669F, 0F, CubicBezierEasingFunction_0());
                // Frame 79.
                result.InsertKeyFrame(0.658333361F, 0.949999988F, CubicBezierEasingFunction_0());
                // Frame 100.
                result.InsertKeyFrame(0.833333313F, 0.400000006F, CubicBezierEasingFunction_0());
                // Frame 119.
                result.InsertKeyFrame(0.991666675F, 0.949999988F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - Layer aggregator
            // -  Offset:<35, 23.5>
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p96_to_0p95()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0.959999979F, HoldThenStepEasingFunction());
                // Frame 15.
                result.InsertKeyFrame(0.125F, 0.600000024F, CubicBezierEasingFunction_0());
                // Frame 30.
                result.InsertKeyFrame(0.25F, 0.800000012F, CubicBezierEasingFunction_0());
                // Frame 35.
                result.InsertKeyFrame(0.291666657F, 0.980000019F, CubicBezierEasingFunction_0());
                // Frame 50.
                result.InsertKeyFrame(0.416666657F, 0.200000003F, CubicBezierEasingFunction_0());
                // Frame 55.
                result.InsertKeyFrame(0.458333343F, 0F, CubicBezierEasingFunction_0());
                // Frame 70.
                result.InsertKeyFrame(0.583333313F, 0.800000012F, CubicBezierEasingFunction_0());
                // Frame 75.
                result.InsertKeyFrame(0.625F, 0.939999998F, CubicBezierEasingFunction_0());
                // Frame 90.
                result.InsertKeyFrame(0.75F, 0.200000003F, CubicBezierEasingFunction_0());
                // Frame 94.
                result.InsertKeyFrame(0.783333361F, 0F, CubicBezierEasingFunction_0());
                // Frame 115.
                result.InsertKeyFrame(0.958333313F, 0.800000012F, CubicBezierEasingFunction_0());
                // Frame 119.
                result.InsertKeyFrame(0.991666675F, 0.949999988F, CubicBezierEasingFunction_0());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                var shapes = result.Shapes;
                // Offset:<35, 23.5>
                shapes.Add(SpriteShape_0());
                // Offset:<24, 23.5>
                shapes.Add(SpriteShape_1());
                // Offset:<13, 23.5>
                shapes.Add(SpriteShape_2());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            internal AnimatedPlayingVisualSource_AnimatedVisual_UAPv7(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(48F, 48F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                StartProgressBoundAnimation(_pathGeometry_0, "TrimStart", TrimStartScalarAnimation_0p96_to_0p95(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_1, "TrimStart", TrimStartScalarAnimation_0p95_to_0p95_0(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_2, "TrimStart", TrimStartScalarAnimation_0p95_to_0p95_1(), RootProgress());
            }

            public void DestroyAnimations()
            {
                _pathGeometry_0.StopAnimation("TrimStart");
                _pathGeometry_1.StopAnimation("TrimStart");
                _pathGeometry_2.StopAnimation("TrimStart");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
