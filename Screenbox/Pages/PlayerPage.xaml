<Page
    x:Class="Screenbox.Pages.PlayerPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:animatedvisuals="using:Microsoft.UI.Xaml.Controls.AnimatedVisuals"
    xmlns:animations="using:Microsoft.Toolkit.Uwp.UI.Animations"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:libvlcstructs="using:LibVLCSharp.Shared.Structures"
    xmlns:lvs="using:LibVLCSharp.Platforms.UWP"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:muxc="using:Microsoft.UI.Xaml.Controls"
    xmlns:converters="using:Screenbox.Converters"
    Background="Black"
    RequestedTheme="Dark"
    mc:Ignorable="d">
    <Page.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Controls/NoAnimationProgressBar.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <SolidColorBrush x:Key="SliderTrackFillPointerOver" Color="Transparent" />
            <SolidColorBrush x:Key="SliderTrackFillPressed" Color="Transparent" />
            <SolidColorBrush x:Key="SliderTrackValueFillPointerOver" Color="Transparent" />
            <SolidColorBrush x:Key="SliderTrackValueFillPressed" Color="Transparent" />
            <SolidColorBrush x:Key="SliderOuterThumbBackground" Color="WhiteSmoke" />

            <StaticResource x:Key="ToggleButtonForegroundChecked" ResourceKey="TextFillColorPrimaryBrush" />
            <StaticResource x:Key="ToggleButtonForegroundCheckedPointerOver" ResourceKey="TextFillColorPrimaryBrush" />
            <StaticResource x:Key="ToggleButtonForegroundCheckedPressed" ResourceKey="TextFillColorSecondaryBrush" />
            <StaticResource x:Key="ToggleButtonForegroundCheckedDisabled" ResourceKey="TextFillColorDisabledBrush" />
            <SolidColorBrush x:Key="ToggleButtonBackgroundChecked" Color="Transparent" />
            <StaticResource x:Key="ToggleButtonBackgroundCheckedPointerOver" ResourceKey="ControlFillColorSecondaryBrush" />
            <StaticResource x:Key="ToggleButtonBackgroundCheckedPressed" ResourceKey="ControlFillColorTertiaryBrush" />
            <StaticResource x:Key="ToggleButtonBackgroundCheckedDisabled" ResourceKey="ControlFillColorDisabledBrush" />

            <LinearGradientBrush x:Key="PlayerControlsBackground" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="0" Color="#00000000" />
                <GradientStop Offset="1" Color="#99000000" />
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="TitleBarBackground" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="1" Color="#00000000" />
                <GradientStop Offset="0" Color="#99000000" />
            </LinearGradientBrush>
            <converters:CommonVisibilityConverter x:Key="CommonVisibilityConverter" />
            <converters:HumanizedDurationConverter x:Key="HumanizedDurationConverter" />
            <converters:ObjectToBooleanConverter x:Key="ObjectToBooleanConverter" />

            <Style BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Height" Value="40" />
                <Setter Property="Margin" Value="2,0" />
            </Style>

            <Style BasedOn="{StaticResource DefaultToggleButtonStyle}" TargetType="ToggleButton">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Height" Value="40" />
                <Setter Property="Margin" Value="2,0" />
            </Style>

            <Flyout
                x:Key="VolumeFlyout"
                Closed="Flyout_Closed"
                Opened="Flyout_Opened">
                <StackPanel Orientation="Horizontal">
                    <ToggleButton
                        Margin="0,0,8,0"
                        Background="Transparent"
                        BorderThickness="0"
                        IsChecked="{x:Bind ViewModel.IsMute, Mode=TwoWay}">
                        <SymbolIcon Symbol="{x:Bind GetMuteToggleSymbol(ViewModel.IsMute), Mode=OneWay}" />
                    </ToggleButton>
                    <Slider Width="150" Value="{x:Bind ViewModel.Volume, Mode=TwoWay}" />
                </StackPanel>
            </Flyout>

            <Flyout
                x:Key="AudioCaptionFlyout"
                Closed="Flyout_Closed"
                Opened="Flyout_Opened">
                <StackPanel Orientation="Vertical">
                    <ListView
                        Width="220"
                        ItemContainerTransitions="{x:Null}"
                        ItemsSource="{x:Bind ViewModel.AudioTrackDescriptions, Mode=OneWay}"
                        SelectedIndex="{x:Bind ViewModel.AudioTrackIndex, Mode=TwoWay}">
                        <ListView.Header>
                            <TextBlock FontWeight="SemiBold" Text="Audio" />
                        </ListView.Header>
                        <ListView.ItemTemplate>
                            <DataTemplate x:DataType="libvlcstructs:TrackDescription">
                                <TextBlock Text="{x:Bind Name}" />
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>
                    <MenuFlyoutSeparator Margin="0,4,0,10" IsTabStop="False" />
                    <ListView
                        Width="220"
                        ItemContainerTransitions="{x:Null}"
                        ItemsSource="{x:Bind ViewModel.SpuDescriptions, Mode=OneWay}"
                        SelectedIndex="{x:Bind ViewModel.SpuIndex, Mode=TwoWay}">
                        <ListView.Header>
                            <TextBlock FontWeight="SemiBold" Text="Subtitles" />
                        </ListView.Header>
                        <ListView.ItemTemplate>
                            <DataTemplate x:DataType="libvlcstructs:TrackDescription">
                                <TextBlock Text="{x:Bind Name}" />
                            </DataTemplate>
                        </ListView.ItemTemplate>
                        <ListView.Footer>
                            <Button
                                Margin="0,4,0,0"
                                HorizontalAlignment="Right"
                                Content="Add subtitle" />
                        </ListView.Footer>
                    </ListView>
                </StackPanel>
            </Flyout>

            <MenuFlyout x:Key="VideoContextMenu">
                <ToggleMenuFlyoutItem
                    Icon="RepeatOne"
                    IsChecked="{x:Bind ViewModel.ShouldLoop, Mode=TwoWay}"
                    Text="Loop" />
                <MenuFlyoutSubItem Text="Playback speed">
                    <MenuFlyoutSubItem.Icon>
                        <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xEC57;" />
                    </MenuFlyoutSubItem.Icon>
                    <muxc:RadioMenuFlyoutItem
                        Click="PlaybackSpeedItem_Click"
                        GroupName="SpeedGroup"
                        Text="0.25" />
                    <muxc:RadioMenuFlyoutItem
                        Click="PlaybackSpeedItem_Click"
                        GroupName="SpeedGroup"
                        Text="0.5" />
                    <muxc:RadioMenuFlyoutItem
                        Click="PlaybackSpeedItem_Click"
                        GroupName="SpeedGroup"
                        Text="0.75" />
                    <muxc:RadioMenuFlyoutItem
                        Click="PlaybackSpeedItem_Click"
                        GroupName="SpeedGroup"
                        IsChecked="True"
                        Text="1" />
                    <muxc:RadioMenuFlyoutItem
                        Click="PlaybackSpeedItem_Click"
                        GroupName="SpeedGroup"
                        Text="1.25" />
                    <muxc:RadioMenuFlyoutItem
                        Click="PlaybackSpeedItem_Click"
                        GroupName="SpeedGroup"
                        Text="1.5" />
                    <muxc:RadioMenuFlyoutItem
                        Click="PlaybackSpeedItem_Click"
                        GroupName="SpeedGroup"
                        Text="1.75" />
                    <muxc:RadioMenuFlyoutItem
                        Click="PlaybackSpeedItem_Click"
                        GroupName="SpeedGroup"
                        Text="2" />
                </MenuFlyoutSubItem>
                <MenuFlyoutSeparator />
                <ToggleMenuFlyoutItem
                    Command="{x:Bind ViewModel.ToggleCompactLayoutCommand}"
                    IsChecked="{x:Bind ViewModel.IsCompact, Mode=OneWay}"
                    Text="Picture in picture">
                    <ToggleMenuFlyoutItem.Icon>
                        <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xEE49;" />
                    </ToggleMenuFlyoutItem.Icon>
                </ToggleMenuFlyoutItem>
                <ToggleMenuFlyoutItem IsChecked="{x:Bind ViewModel.ZoomToFit, Mode=TwoWay}" Text="Zoom to fit">
                    <ToggleMenuFlyoutItem.Icon>
                        <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xE9A6;" />
                    </ToggleMenuFlyoutItem.Icon>
                </ToggleMenuFlyoutItem>
            </MenuFlyout>
        </ResourceDictionary>
    </Page.Resources>

    <Grid x:Name="LayoutRoot">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Border
            x:Name="TitleBarElement"
            Grid.Row="0"
            MinHeight="52"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            Background="Transparent"
            Canvas.ZIndex="2" />
        <Border
            x:Name="Header"
            Grid.Row="0"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            Background="{StaticResource TitleBarBackground}"
            Canvas.ZIndex="1">
            <Border.RenderTransform>
                <TranslateTransform x:Name="HeaderTranslate" />
            </Border.RenderTransform>
            <TextBlock
                x:Name="TitleText"
                Margin="80,0,90,0"
                VerticalAlignment="Center"
                FontSize="28"
                FontWeight="SemiBold"
                Text="{x:Bind ViewModel.MediaTitle, Mode=OneWay}"
                TextTrimming="CharacterEllipsis" />
        </Border>

        <Button
            x:Name="BackButton"
            Grid.Row="0"
            Width="52"
            Height="52"
            Margin="12"
            HorizontalAlignment="Left"
            Canvas.ZIndex="2">
            <Button.RenderTransform>
                <TranslateTransform x:Name="BackButtonTranslate" />
            </Button.RenderTransform>
            <muxc:AnimatedIcon>
                <muxc:AnimatedIcon.Source>
                    <animatedvisuals:AnimatedBackVisualSource />
                </muxc:AnimatedIcon.Source>
            </muxc:AnimatedIcon>
        </Button>

        <lvs:VideoView
            x:Name="VideoView"
            Grid.Row="0"
            Grid.RowSpan="3"
            AllowDrop="True"
            Canvas.ZIndex="0"
            ContextFlyout="{StaticResource VideoContextMenu}"
            IsTabStop="True"
            KeyboardAcceleratorPlacementMode="Hidden"
            ManipulationMode="TranslateX,TranslateY"
            MediaPlayer="{x:Bind ViewModel.MediaPlayer}"
            Tapped="VideoView_Tapped">
            <lvs:VideoView.KeyboardAccelerators>
                <KeyboardAccelerator
                    Key="Left"
                    Invoked="ProcessVideoViewKeyboardAccelerators"
                    ScopeOwner="{x:Bind VideoView}" />
                <KeyboardAccelerator
                    Key="Left"
                    Invoked="ProcessVideoViewKeyboardAccelerators"
                    Modifiers="Control"
                    ScopeOwner="{x:Bind VideoView}" />
                <KeyboardAccelerator
                    Key="Left"
                    Invoked="ProcessVideoViewKeyboardAccelerators"
                    Modifiers="Shift"
                    ScopeOwner="{x:Bind VideoView}" />
                <KeyboardAccelerator
                    Key="Right"
                    Invoked="ProcessVideoViewKeyboardAccelerators"
                    ScopeOwner="{x:Bind VideoView}" />
                <KeyboardAccelerator
                    Key="Right"
                    Invoked="ProcessVideoViewKeyboardAccelerators"
                    Modifiers="Control"
                    ScopeOwner="{x:Bind VideoView}" />
                <KeyboardAccelerator
                    Key="Right"
                    Invoked="ProcessVideoViewKeyboardAccelerators"
                    Modifiers="Shift"
                    ScopeOwner="{x:Bind VideoView}" />
                <KeyboardAccelerator
                    Key="Up"
                    Invoked="ProcessVideoViewKeyboardAccelerators"
                    ScopeOwner="{x:Bind VideoView}" />
                <KeyboardAccelerator
                    Key="Down"
                    Invoked="ProcessVideoViewKeyboardAccelerators"
                    ScopeOwner="{x:Bind VideoView}" />
                <KeyboardAccelerator Key="J" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="L" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="Number0" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="Number1" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="Number2" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="Number3" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="Number4" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="Number5" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="Number6" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="Number7" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="Number8" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="Number9" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="NumberPad0" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="NumberPad1" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="NumberPad2" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="NumberPad3" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="NumberPad4" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="NumberPad5" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="NumberPad6" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="NumberPad7" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="NumberPad8" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="NumberPad9" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="{x:Bind PeriodKey}" Invoked="ProcessVideoViewKeyboardAccelerators" />
                <KeyboardAccelerator Key="{x:Bind CommaKey}" Invoked="ProcessVideoViewKeyboardAccelerators" />
            </lvs:VideoView.KeyboardAccelerators>
            <interactivity:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="Unloaded">
                    <core:CallMethodAction MethodName="Dispose" TargetObject="{x:Bind ViewModel}" />
                </core:EventTriggerBehavior>
                <core:EventTriggerBehavior EventName="Tapped">
                    <core:CallMethodAction MethodName="ToggleControlsVisibility" TargetObject="{x:Bind ViewModel}" />
                </core:EventTriggerBehavior>
                <core:EventTriggerBehavior EventName="SizeChanged">
                    <core:CallMethodAction MethodName="OnSizeChanged" TargetObject="{x:Bind ViewModel}" />
                </core:EventTriggerBehavior>
                <core:EventTriggerBehavior EventName="DragOver">
                    <core:CallMethodAction MethodName="OnDragOver" TargetObject="{x:Bind ViewModel}" />
                </core:EventTriggerBehavior>
                <core:EventTriggerBehavior EventName="Drop">
                    <core:CallMethodAction MethodName="OnDrop" TargetObject="{x:Bind ViewModel}" />
                </core:EventTriggerBehavior>
                <core:EventTriggerBehavior EventName="Initialized">
                    <core:CallMethodAction MethodName="Initialize" TargetObject="{x:Bind ViewModel}" />
                </core:EventTriggerBehavior>
                <core:EventTriggerBehavior EventName="PointerWheelChanged">
                    <core:CallMethodAction MethodName="OnPointerWheelChanged" TargetObject="{x:Bind ViewModel}" />
                </core:EventTriggerBehavior>
                <core:EventTriggerBehavior EventName="ManipulationStarted">
                    <core:CallMethodAction MethodName="VideoView_ManipulationStarted" TargetObject="{x:Bind ViewModel}" />
                </core:EventTriggerBehavior>
                <core:EventTriggerBehavior EventName="ManipulationDelta">
                    <core:CallMethodAction MethodName="VideoView_ManipulationDelta" TargetObject="{x:Bind ViewModel}" />
                </core:EventTriggerBehavior>
                <core:EventTriggerBehavior EventName="ManipulationEnded">
                    <core:CallMethodAction MethodName="VideoView_ManipulationEnded" TargetObject="{x:Bind ViewModel}" />
                </core:EventTriggerBehavior>
                <core:EventTriggerBehavior EventName="GotFocus">
                    <core:ChangePropertyAction
                        PropertyName="VideoViewFocused"
                        TargetObject="{x:Bind ViewModel}"
                        Value="True" />
                </core:EventTriggerBehavior>
                <core:EventTriggerBehavior EventName="LostFocus">
                    <core:ChangePropertyAction
                        PropertyName="VideoViewFocused"
                        TargetObject="{x:Bind ViewModel}"
                        Value="False" />
                </core:EventTriggerBehavior>
                <core:DataTriggerBehavior Binding="{x:Bind ViewModel.VideoViewFocused, Mode=OneWay}" Value="True">
                    <core:CallMethodAction MethodName="FocusVideoView" TargetObject="{x:Bind}" />
                </core:DataTriggerBehavior>
            </interactivity:Interaction.Behaviors>
        </lvs:VideoView>

        <Border
            x:Name="StatusMessage"
            Grid.Row="1"
            Margin="24,4"
            Padding="10"
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            Background="{ThemeResource AcrylicInAppFillColorDefaultBrush}"
            CornerRadius="6"
            IsHitTestVisible="False"
            Visibility="{x:Bind ViewModel.StatusMessage, Mode=OneWay, Converter={StaticResource CommonVisibilityConverter}}">
            <animations:Implicit.ShowAnimations>
                <animations:OpacityAnimation To="1.0" Duration="0:0:0.1" />
            </animations:Implicit.ShowAnimations>

            <animations:Implicit.HideAnimations>
                <animations:OpacityAnimation To="0.0" Duration="0:0:0.24" />
            </animations:Implicit.HideAnimations>
            <TextBlock
                x:Name="StatusMessageText"
                FontSize="20"
                FontWeight="SemiBold"
                Text="{x:Bind ViewModel.StatusMessage, Mode=OneWay}" />
        </Border>

        <muxc:ProgressRing
            x:Name="BufferingIndicator"
            Grid.Row="0"
            Grid.RowSpan="3"
            Width="52"
            Height="52"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            IsActive="True"
            IsHitTestVisible="False"
            Visibility="{x:Bind GetBufferingVisibilityIndicator(ViewModel.PlayerState), Mode=OneWay}" />

        <muxc:InfoBar
            Title="{x:Bind ViewModel.Notification.Title, Mode=OneWay}"
            Grid.Row="1"
            Margin="12,12"
            HorizontalAlignment="Center"
            VerticalAlignment="Bottom"
            Content="{x:Bind ViewModel.Notification.Content, Mode=OneWay}"
            IsOpen="{x:Bind ViewModel.Notification, Mode=OneWay, Converter={StaticResource ObjectToBooleanConverter}}"
            Message="{x:Bind ViewModel.Notification.Message, Mode=OneWay}"
            Severity="{x:Bind ConvertInfoBarSeverity(ViewModel.Notification.Level), Mode=OneWay}" />

        <Grid
            x:Name="PlayerControls"
            Grid.Row="2"
            Padding="12,20,12,12"
            Background="{StaticResource PlayerControlsBackground}"
            XYFocusKeyboardNavigation="Enabled">
            <Grid.RenderTransform>
                <TranslateTransform x:Name="PlayerControlsTranslate" />
            </Grid.RenderTransform>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <muxc:ProgressBar
                x:Name="PlayerProgressBar"
                Grid.Row="0"
                Grid.Column="0"
                Grid.ColumnSpan="3"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center"
                AutomationProperties.AccessibilityView="Raw"
                Maximum="{x:Bind SeekBar.Maximum, Mode=OneWay}"
                Style="{StaticResource NoAnimationProgressBar}"
                Value="{x:Bind SeekBar.Value, Mode=OneWay}" />
            <muxc:ProgressBar
                x:Name="BufferingProgressBar"
                Grid.Row="0"
                Grid.Column="0"
                Grid.ColumnSpan="3"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center"
                AutomationProperties.AccessibilityView="Raw"
                Foreground="Orange"
                IsIndeterminate="True"
                Visibility="{x:Bind ViewModel.BufferingVisible, Mode=OneWay, Converter={StaticResource CommonVisibilityConverter}}" />
            <Slider
                x:Name="SeekBar"
                Grid.Row="0"
                Grid.Column="0"
                Grid.ColumnSpan="3"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center"
                Background="Transparent"
                Foreground="Transparent"
                IsEnabled="{x:Bind ViewModel.IsSeekable, Mode=OneWay, FallbackValue=False}"
                LargeChange="10000"
                Maximum="{x:Bind ViewModel.Length, Mode=OneWay, FallbackValue=0}"
                Minimum="0"
                SmallChange="1000"
                ThumbToolTipValueConverter="{StaticResource HumanizedDurationConverter}"
                Value="{x:Bind ViewModel.Time, Mode=TwoWay}">
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="ValueChanged">
                        <core:CallMethodAction MethodName="OnSeekBarValueChanged" TargetObject="{x:Bind ViewModel}" />
                    </core:EventTriggerBehavior>
                    <core:EventTriggerBehavior EventName="GotFocus">
                        <core:ChangePropertyAction
                            PropertyName="SeekbarFocused"
                            TargetObject="{x:Bind ViewModel}"
                            Value="True" />
                    </core:EventTriggerBehavior>
                    <core:EventTriggerBehavior EventName="LostFocus">
                        <core:ChangePropertyAction
                            PropertyName="SeekbarFocused"
                            TargetObject="{x:Bind ViewModel}"
                            Value="False" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
            </Slider>

            <StackPanel
                Grid.Row="1"
                Grid.Column="0"
                Orientation="Horizontal">
                <Button
                    x:Name="PlayPauseButton"
                    Margin="0,0,2,0"
                    Command="{x:Bind ViewModel.PlayPauseCommand}">
                    <Button.KeyboardAccelerators>
                        <KeyboardAccelerator Key="P" />
                        <KeyboardAccelerator Key="K" />
                        <KeyboardAccelerator Key="Space" ScopeOwner="{x:Bind VideoView}" />
                    </Button.KeyboardAccelerators>
                    <SymbolIcon Symbol="{x:Bind GetPlayPauseSymbol(ViewModel.IsPlaying), Mode=OneWay}" />
                </Button>
                <muxc:ToggleSplitButton
                    x:Name="MuteButton"
                    Height="40"
                    Background="Transparent"
                    BorderThickness="0"
                    Flyout="{StaticResource VolumeFlyout}"
                    IsChecked="{x:Bind ViewModel.IsMute, Mode=TwoWay}">
                    <muxc:SplitButton.KeyboardAccelerators>
                        <KeyboardAccelerator Key="M" />
                    </muxc:SplitButton.KeyboardAccelerators>
                    <SymbolIcon Symbol="{x:Bind GetMuteToggleSymbol(ViewModel.IsMute), Mode=OneWay}" />
                </muxc:ToggleSplitButton>
                <TextBlock Margin="8,0" VerticalAlignment="Center">
                    <Run Text="{x:Bind ViewModel.Time, Mode=OneWay, Converter={StaticResource HumanizedDurationConverter}}" />
                    <Run Text=" / " />
                    <Run Text="{x:Bind ViewModel.Length, Mode=OneWay, Converter={StaticResource HumanizedDurationConverter}}" />
                </TextBlock>
            </StackPanel>

            <StackPanel
                Grid.Row="1"
                Grid.Column="2"
                Orientation="Horizontal">
                <Button x:Name="AudioAndCaptionButton" Flyout="{StaticResource AudioCaptionFlyout}">
                    <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xED1F;" />
                    <Button.KeyboardAccelerators>
                        <KeyboardAccelerator Key="C" />
                    </Button.KeyboardAccelerators>
                </Button>

                <ToggleButton
                    x:Name="FullscreenButton"
                    Command="{x:Bind ViewModel.FullscreenCommand}"
                    CommandParameter="{x:Bind FullscreenButton.IsChecked, Mode=OneWay}"
                    IsChecked="{x:Bind ViewModel.IsFullscreen, Mode=OneWay}">
                    <ToggleButton.KeyboardAccelerators>
                        <KeyboardAccelerator Key="F" />
                    </ToggleButton.KeyboardAccelerators>
                    <SymbolIcon Symbol="{x:Bind GetFullscreenToggleSymbol(ViewModel.IsFullscreen), Mode=OneWay}" />
                </ToggleButton>

                <Button
                    x:Name="MoreButton"
                    Margin="2,0,0,0"
                    Flyout="{StaticResource VideoContextMenu}">
                    <SymbolIcon Symbol="More" />
                </Button>

                <Button
                    x:Name="ExitCompactOverlayButton"
                    Command="{x:Bind ViewModel.ToggleCompactLayoutCommand}"
                    Visibility="Collapsed">
                    <Button.KeyboardAccelerators>
                        <KeyboardAccelerator Key="Escape" />
                    </Button.KeyboardAccelerators>
                    <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xEE47;" />
                </Button>
            </StackPanel>
        </Grid>

        <interactivity:Interaction.Behaviors>
            <core:DataTriggerBehavior Binding="{x:Bind ViewModel.ControlsHidden, Mode=OneWay}" Value="True">
                <core:GoToStateAction StateName="Hidden" TargetObject="{x:Bind}" />
            </core:DataTriggerBehavior>
            <core:DataTriggerBehavior Binding="{x:Bind ViewModel.ControlsHidden, Mode=OneWay}" Value="False">
                <core:GoToStateAction StateName="Normal" TargetObject="{x:Bind}" />
            </core:DataTriggerBehavior>
            <core:DataTriggerBehavior Binding="{x:Bind ViewModel.IsCompact, Mode=OneWay}" Value="True">
                <core:GoToStateAction StateName="Compact" TargetObject="{x:Bind}" />
            </core:DataTriggerBehavior>
            <core:DataTriggerBehavior Binding="{x:Bind ViewModel.IsCompact, Mode=OneWay}" Value="False">
                <core:GoToStateAction StateName="Full" TargetObject="{x:Bind}" />
            </core:DataTriggerBehavior>
            <core:EventTriggerBehavior EventName="PointerMoved">
                <core:CallMethodAction MethodName="OnPointerMoved" TargetObject="{x:Bind ViewModel}" />
            </core:EventTriggerBehavior>
        </interactivity:Interaction.Behaviors>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="ControlsVisibilityStates">
                <VisualStateGroup.Transitions>
                    <VisualTransition
                        GeneratedDuration="0:0:0.167"
                        From="Hidden"
                        To="Normal">
                        <VisualTransition.GeneratedEasingFunction>
                            <QuadraticEase EasingMode="EaseOut" />
                        </VisualTransition.GeneratedEasingFunction>
                    </VisualTransition>
                    <VisualTransition
                        GeneratedDuration="0:0:0.3"
                        From="Normal"
                        To="Hidden">
                        <VisualTransition.GeneratedEasingFunction>
                            <QuadraticEase EasingMode="EaseIn" />
                        </VisualTransition.GeneratedEasingFunction>
                    </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Hidden">
                    <VisualState.Setters>
                        <Setter Target="Header.Opacity" Value="0" />
                        <Setter Target="BackButton.Opacity" Value="0" />
                        <Setter Target="PlayerControls.Opacity" Value="0" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup x:Name="LayoutGroup">
                <VisualState x:Name="Full" />
                <VisualState x:Name="Compact">
                    <VisualState.Setters>
                        <Setter Target="BackButton.Visibility" Value="Collapsed" />
                        <Setter Target="TitleBarElement.MinHeight" Value="32" />
                        <Setter Target="TitleText.FontSize" Value="12" />
                        <Setter Target="TitleText.FontWeight" Value="Normal" />
                        <Setter Target="TitleText.Margin" Value="13,0,0,0" />
                        <Setter Target="MuteButton.Visibility" Value="Collapsed" />
                        <Setter Target="MoreButton.Visibility" Value="Collapsed" />
                        <Setter Target="AudioAndCaptionButton.Visibility" Value="Collapsed" />
                        <Setter Target="FullscreenButton.Visibility" Value="Collapsed" />
                        <Setter Target="SeekBar.Visibility" Value="Collapsed" />
                        <Setter Target="ExitCompactOverlayButton.Visibility" Value="Visible" />
                        <Setter Target="PlayerProgressBar.(Grid.Row)" Value="2" />
                        <Setter Target="BufferingProgressBar.(Grid.Row)" Value="2" />
                        <Setter Target="PlayerControls.Padding" Value="4,4,4,0" />
                        <Setter Target="StatusMessageText.FontSize" Value="16" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</Page>
