name:  Windows Release Builder

on:
  push

jobs:
  build:
    runs-on: windows-latest  
    steps:
    # - name: Get tag
    #   id: tag
    #   uses: dawidd6/action-get-tag@v1
           
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1

    - name: Fetch Gomplate
      uses: dsaltares/fetch-gh-release-asset@1.1.0
      with:
        repo: hairyhenderson/gomplate
        version: tags/v3.11.3
        file: gomplate_windows-amd64-slim.exe
        target: gomplate.exe

    - name: Render secrets
      env:
        APPCENTER_API_KEY: ${{ secrets.APPCENTER_API_KEY }}
      run: Get-Content Screenbox/Secrets.cs.template | .\gomplate.exe | Set-Content Screenbox/Secrets.cs

    - name: Restore solution
      run: |
        msbuild $((Get-Item *.sln).Name) `
        -p:RestoreConfigFile=nuget.config `
        -restore
      
    - name: Build solution
      run: |
        msbuild $((Get-Item *.sln).Name) `
        -v:d `
        -p:Configuration=Release `
        -p:Platform=x64 `
        -p:AppxBundle=Always `
        -p:AppxBundlePlatforms="$env:BuildPlatforms" `
        -p:UapAppxPackageBuildMode=$env:BuildMode `
        -p:AppxPackageDir=C:\DeployOutput `
        -p:AppxPackageSigningEnabled=false `
      env:
        BuildMode: StoreUpload
        BuildPlatforms: x86|x64|ARM
    
    - name: Create archive
      id: archive
      run: |
        $build = Get-ChildItem C:\DeployOutput\
        $archive = $build | Compress-Archive -DestinationPath "$build.zip" -PassThru
        Write-Output "::set-output name=path::$archive"

    # - name: Create release
    #   id: create_release
    #   uses: ncipollo/release-action@v1
    #   with:
    #     artifacts: ${{ steps.archive.outputs.path }}
    #     artifactContentType: application/zip
    #     tag: ${{ steps.tag.outputs.tag }}
    #     token: ${{ secrets.GITHUB_TOKEN }}
